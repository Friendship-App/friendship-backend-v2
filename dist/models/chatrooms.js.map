{"version":3,"sources":["../../src/models/chatrooms.js"],"names":["dbGetUserChatroom","userId","knex","select","from","leftJoin","where","dbGetChatrooms","chatrooms","then","data","i","length","first","chatroomId","orderBy","lastMessage","count","andWhere","unreadMessages","unreadMessagesCount","isEventChatroom","participantsData","eventData","dbCreateChatroom","chatroomInfo","console","log","creatorId","chatroom","insert","into","returning","createdChatrooms","id","participantId"],"mappings":"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","file":"chatrooms.js","sourcesContent":["import knex from '../utils/knex';\n\nexport const dbGetUserChatroom = userId =>\n  knex\n    .select('chatrooms.id')\n    .from('chatrooms')\n    .leftJoin('user_chatroom', 'chatroomId', 'chatrooms.id')\n    .where('participantId', userId);\n\nexport const dbGetChatrooms = async userId => {\n  let chatrooms = await knex\n    .select(\n      'chatrooms.id as chatroomId',\n      'chatrooms.creatorId',\n      'chatrooms.isEventChatroom',\n    )\n    .from('chatrooms')\n    .leftJoin('user_chatroom', 'user_chatroom.chatroomId', 'chatrooms.id')\n    .where('user_chatroom.participantId', userId)\n    .then(data => data);\n\n  for (let i = 0; i < chatrooms.length; i++) {\n    await knex\n      .first()\n      .select()\n      .from('messages')\n      .where('chatroomId', chatrooms[i].chatroomId)\n      .orderBy('chatTime', 'desc')\n      .then(lastMessage => {\n        chatrooms[i].lastMessage = lastMessage ? lastMessage : '';\n      });\n\n    await knex\n      .count()\n      .from('unread_messages')\n      .where('receiverId', userId)\n      .andWhere('chatroomId', chatrooms[i].chatroomId)\n      .then(\n        unreadMessagesCount =>\n          (chatrooms[i].unreadMessages = unreadMessagesCount[0].count),\n      );\n\n    if (!chatrooms[i].isEventChatroom) {\n      await knex\n        .select('users.id', 'avatar', 'username', 'image')\n        .from('user_chatroom')\n        .leftJoin('users', 'user_chatroom.participantId', 'users.id')\n        .where('user_chatroom.chatroomId', chatrooms[i].chatroomId)\n        .then(\n          participantsData =>\n            (chatrooms[i].participantsData = participantsData),\n        );\n    } else {\n      await knex\n        .select('events.title', 'events.eventImage', 'events.id')\n        .from('events')\n        .where('events.chatroomId', chatrooms[i].chatroomId)\n        .then(eventData => (chatrooms[i].eventData = eventData[0]));\n    }\n  }\n\n  /*for (let i = chatrooms.length - 1; i > 0; i--) {\n    if (!chatrooms[i].lastMessage) {\n      chatrooms.splice(i, 1);\n    }\n  }*/\n\n  return chatrooms;\n};\n\nexport const dbCreateChatroom = async chatroomInfo => {\n  console.log(chatroomInfo.creatorId);\n  const chatroom = await knex\n    .insert({ creatorId: chatroomInfo.creatorId })\n    .into('chatrooms')\n    .returning('*')\n    .then(createdChatrooms => createdChatrooms[0]);\n\n  await knex('user_chatroom')\n    .insert([\n      { chatroomId: chatroom.id, participantId: chatroomInfo.participantId },\n      { chatroomId: chatroom.id, participantId: chatroomInfo.creatorId },\n    ])\n    .returning('*')\n    .then();\n\n  return chatroom;\n};\n"]}