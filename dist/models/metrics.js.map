{"version":3,"sources":["../../src/models/metrics.js"],"names":["isDebugOn","dbUserLastActive","userId","where","id","update","lastActive","dbGetRegisteredUser","first","getDates","startDate","endDate","dates","chosenDate","startOf","isSameOrBefore","push","timestamp","count","add","dbDisplayRegisteredUsersData","comparingData","data","collectUsersCreatedAt","debug","select","knex","raw","groupBy","orderBy","forEach","element","isSame","row","users_count","collectMetricsUsersRegistered","length","transaction","trx","insert","returning","then","results","dbUpdateRegisteredUsersData","existingData","dayRegisteredUsers","dbDisplayActiveUsersData","collectUsersLastActive","collectMetricsActiveUsers","dbUpdateActiveUsersData","dayActiveUsers","dbDisplayActiveConversationData","collectLastMessagesByDate","conversations_count","collectMetricsActiveConversations","dbUpDateActiveConversationsData","dayActiveConversations","countDistinct","dbDisplayAverageConversationsLength","joinChatroomMessagesByDate","join","number_of_chatrooms","messages_count","number_of_messages","collectMetricsConversationsLength","avgLength","Number","isNaN","conversations_length","toFixed","dbUpdateAverageConversationsLength","dayStats","as","Date","chatCount","Rooms","dbDisplayAllMetrics","dbDisplayWeekMetrics","limit","dbDisplayMonthMetrics"],"mappings":"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","file":"metrics.js","sourcesContent":["import moment from 'moment';\nimport knex from '../utils/knex';\n\nconst isDebugOn = false;\n\nexport const dbUserLastActive = userId =>\n  knex('users')\n    .where({ id: userId })\n    .update({ lastActive: moment() });\n\n// minh - created data model for each registered user row\nexport const dbGetRegisteredUser = id =>\n  knex('metrics_users_registered')\n    .first()\n    .where({ id });\n\n// minh - display emtrics data on front-end with some logic\n// 1. collect data from users table\n// 2. create an array of dates from desired startDate to now\n// 3. collect data from metrics table\n// 4. compare dates from metrics table with the array\n// 5. update counts/average on date array where matched\n// 6. check if metrics table is empty\n// 7. insert updated data from date array if empty, otherwise do nothing\n// 8. return latest 30 rows on metrics table to front-end.\n\n// method to create array of dates between start and end\nexport const getDates = (startDate, endDate) => {\n  const dates = [];\n  const chosenDate = moment(startDate).startOf('day');\n  while (chosenDate.isSameOrBefore(moment(endDate))) {\n    dates.push({\n      timestamp: moment(chosenDate),\n      count: 0,\n    });\n    chosenDate.add(1, 'days');\n  }\n  return dates;\n};\n\n// count registered users by date\nexport const dbDisplayRegisteredUsersData = async () => {\n  // generate date arrays\n  const comparingData = await getDates('2018-01-01', moment().startOf('day'));\n  // empty array to hold data to be inserted, updated\n  const data = [];\n\n  // collect data from users table\n  const collectUsersCreatedAt = await knex('users')\n    .debug(isDebugOn)\n    .select(\n      knex.raw(\n        'count(\\'*\\') as users_count, Date(users.\"createdAt\") as timestamp',\n      ),\n    )\n    .groupBy('timestamp')\n    .orderBy('timestamp', 'asc');\n\n  // compare to date array\n  await comparingData.forEach(async element => {\n    await collectUsersCreatedAt.forEach(row => {\n      if (moment(element.timestamp).isSame(moment(row.timestamp))) {\n        // update the count on matched dates\n        element.count = row.users_count;\n      }\n      return element.count;\n    });\n    // populate data array\n    data.push(element);\n  });\n\n  // check metrics table to do the inserts\n  const collectMetricsUsersRegistered = await knex('metrics_users_registered')\n    .debug(isDebugOn)\n    .select('*');\n\n  if (collectMetricsUsersRegistered.length === 0) {\n    await data.forEach(async element => {\n      await knex.transaction(trx =>\n        trx('metrics_users_registered')\n          .debug(isDebugOn)\n          .insert({\n            users_count: element.count,\n            timestamp: element.timestamp,\n          })\n          .returning('*')\n          .then(results => results[0]),\n      );\n    });\n  }\n  return knex('metrics_users_registered')\n    .debug(isDebugOn)\n    .select('*')\n    .orderBy('timestamp', 'desc');\n};\n\n// minh - logic to insert new row or update the row\nexport const dbUpdateRegisteredUsersData = async () => {\n  const existingData = await dbDisplayRegisteredUsersData();\n\n  const dayRegisteredUsers = await knex('users')\n    .debug(isDebugOn)\n    .count('*')\n    .where(knex.raw('??::date = ?', ['createdAt', moment().startOf('day')]));\n\n  // check if there is a row with today's date in the table\n  // if yes update the row, if no insert a new row\n\n  if (\n    moment(existingData[0].timestamp)\n      .startOf('day')\n      .isSame(moment().startOf('day'))\n  ) {\n    await knex.transaction(trx =>\n      trx('metrics_users_registered')\n        .debug(isDebugOn)\n        .update({ users_count: dayRegisteredUsers[0].count })\n        .where(\n          knex.raw('??::date = ?', ['timestamp', moment().startOf('day')]),\n        ),\n    );\n  } else {\n    await knex.transaction(trx =>\n      trx('metrics_users_registered')\n        .debug(isDebugOn)\n        .insert({\n          users_count: dayRegisteredUsers[0].count,\n          timestamp: moment().startOf('day'),\n        }),\n    );\n  }\n  return knex('metrics_users_registered')\n    .debug(isDebugOn)\n    .select('*')\n    .where(knex.raw('??::date = ?', ['timestamp', moment().startOf('day')]));\n};\n\n// minh - display last active users count on front-end\nexport const dbDisplayActiveUsersData = async () => {\n  const comparingData = await getDates('2018-01-01', moment().startOf('day'));\n  const data = [];\n\n  const collectUsersLastActive = await knex('users')\n    .debug(isDebugOn)\n    .select(\n      knex.raw(\n        'count(\\'*\\') as users_count, Date(users.\"lastActive\") as timestamp',\n      ),\n    )\n    .groupBy('timestamp')\n    .orderBy('timestamp', 'asc');\n\n  await comparingData.forEach(async element => {\n    await collectUsersLastActive.forEach(row => {\n      if (moment(element.timestamp).isSame(moment(row.timestamp))) {\n        element.count = row.users_count;\n      }\n      return element.count;\n    });\n    data.push(element);\n  });\n\n  const collectMetricsActiveUsers = await knex('metrics_active_users')\n    .debug(isDebugOn)\n    .select('*');\n\n  if (collectMetricsActiveUsers.length === 0) {\n    await data.forEach(async element => {\n      await knex.transaction(trx =>\n        trx('metrics_active_users')\n          .debug(isDebugOn)\n          .insert({\n            users_count: element.count,\n            timestamp: element.timestamp,\n          })\n          .returning('*')\n          .then(results => results[0]),\n      );\n    });\n  }\n  return knex('metrics_active_users')\n    .debug(isDebugOn)\n    .select('*')\n    .orderBy('timestamp', 'desc');\n};\n\n// count lastActive from users table\n// insert or update the result into a row on metrics_active_users.users_count\nexport const dbUpdateActiveUsersData = async () => {\n  const existingData = await dbDisplayActiveUsersData();\n\n  const dayActiveUsers = await knex('users')\n    .debug(isDebugOn)\n    .count('*')\n    .where(knex.raw('??::date = ?', ['lastActive', moment().startOf('day')]));\n\n  // check if there is a row with today's date in the table\n  // if yes update the row, if no insert a new row\n  if (\n    moment(existingData[0].timestamp)\n      .startOf('day')\n      .isSame(moment().startOf('day'))\n  ) {\n    await knex.transaction(trx =>\n      trx('metrics_active_users')\n        .debug(isDebugOn)\n        .update({ users_count: dayActiveUsers[0].count })\n        .where(\n          knex.raw('??::date = ?', ['timestamp', moment().startOf('day')]),\n        ),\n    );\n  } else {\n    await knex.transaction(trx =>\n      trx('metrics_active_users')\n        .debug(isDebugOn)\n        .insert({\n          users_count: dayActiveUsers[0].count,\n          timestamp: moment().startOf('day'),\n        }),\n    );\n  }\n  return knex('metrics_active_users')\n    .debug(isDebugOn)\n    .select('*')\n    .where(knex.raw('??::date = ?', ['timestamp', moment().startOf('day')]));\n};\n\n// minh - display active conversation counts by date\nexport const dbDisplayActiveConversationData = async () => {\n  const comparingData = await getDates('2018-01-01', moment().startOf('day'));\n  const data = [];\n\n  const collectLastMessagesByDate = await knex('messages')\n    .debug(isDebugOn)\n    .select(\n      knex.raw(\n        'Date(messages.\"chat_time\") as timestamp, count(distinct messages.\"chatroom_id\") as conversations_count',\n      ),\n    )\n    .groupBy('timestamp')\n    .orderBy('timestamp', 'asc');\n\n  await comparingData.forEach(async element => {\n    await collectLastMessagesByDate.forEach(row => {\n      if (moment(element.timestamp).isSame(moment(row.timestamp))) {\n        element.count = row.conversations_count;\n      }\n      return element.count;\n    });\n    data.push(element);\n  });\n\n  const collectMetricsActiveConversations = await knex(\n    'metrics_active_conversations',\n  )\n    .debug(isDebugOn)\n    .select('*');\n\n  if (collectMetricsActiveConversations.length === 0) {\n    await data.forEach(async element => {\n      await knex.transaction(trx =>\n        trx('metrics_active_conversations')\n          .debug(isDebugOn)\n          .insert({\n            conversations_count: element.count,\n            timestamp: element.timestamp,\n          })\n          .returning('*')\n          .then(results => results[0]),\n      );\n    });\n  }\n  return knex('metrics_active_conversations')\n    .debug(isDebugOn)\n    .select('*')\n    .orderBy('timestamp', 'desc');\n};\n\n// minh - logic to update/ insert data row in metrics_active_conversations\nexport const dbUpDateActiveConversationsData = async () => {\n  const existingData = await dbDisplayActiveConversationData();\n\n  const dayActiveConversations = await knex('messages')\n    .debug(isDebugOn)\n    .countDistinct('chatroom_id')\n    .where(knex.raw('??::date = ?', ['chat_time', moment().startOf('day')]));\n\n  if (\n    moment(existingData[0].timestamp)\n      .startOf('day')\n      .isSame(moment().startOf('day'))\n  ) {\n    await knex.transaction(trx =>\n      trx('metrics_active_conversations')\n        .debug(isDebugOn)\n        .update({ conversations_count: dayActiveConversations[0].count })\n        .where(\n          knex.raw('??::date = ?', ['timestamp', moment().startOf('day')]),\n        ),\n    );\n  } else {\n    await knex.transaction(trx =>\n      trx('metrics_active_conversations')\n        .debug(isDebugOn)\n        .insert({\n          conversations_count: dayActiveConversations[0].count,\n          timestamp: moment().startOf('day'),\n        }),\n    );\n  }\n\n  return knex('metrics_active_conversations')\n    .debug(isDebugOn)\n    .select('*')\n    .where(knex.raw('??::date = ?', ['timestamp', moment().startOf('day')]));\n};\n\n// minh - display average conversations length by date\nexport const dbDisplayAverageConversationsLength = async () => {\n  const comparingData = await getDates('2018-01-01', moment().startOf('day'));\n  const data = [];\n\n  await dbDisplayActiveConversationData();\n\n  const joinChatroomMessagesByDate = await knex('metrics_active_conversations')\n    .debug(isDebugOn)\n    .join(\n      'messages',\n      knex.raw('??::date', ['timestamp']),\n      knex.raw('??::date', ['messages.chat_time']),\n    )\n    .select(\n      knex.raw(`metrics_active_conversations.\"timestamp\" as timestamp, \n                      metrics_active_conversations.\"conversations_count\" as number_of_chatrooms, \n                      count(messages.\"id\") as number_of_messages`),\n    )\n    .groupBy('timestamp', 'number_of_chatrooms');\n\n  await comparingData.forEach(async element => {\n    await joinChatroomMessagesByDate.forEach(row => {\n      if (moment(element.timestamp).isSame(moment(row.timestamp))) {\n        element.count = row.number_of_chatrooms;\n        element.messages_count = row.number_of_messages;\n      }\n      return element;\n    });\n    data.push(element);\n  });\n\n  const collectMetricsConversationsLength = await knex(\n    'metrics_conversations_length',\n  )\n    .debug(isDebugOn)\n    .select('*');\n\n  if (collectMetricsConversationsLength.length === 0) {\n    await data.forEach(async element => {\n      const avgLength = element.messages_count / element.count;\n      Number.isNaN(avgLength)\n        ? await knex.transaction(trx =>\n            trx('metrics_conversations_length')\n              .debug(isDebugOn)\n              .insert({\n                conversations_length: 0,\n                timestamp: element.timestamp,\n              }),\n          )\n        : await knex.transaction(trx =>\n            trx('metrics_conversations_length')\n              .debug(isDebugOn)\n              .insert({\n                conversations_length: avgLength.toFixed(2),\n                timestamp: element.timestamp,\n              }),\n          );\n    });\n  }\n  return knex('metrics_conversations_length')\n    .debug(isDebugOn)\n    .select('*')\n    .orderBy('timestamp', 'desc');\n};\n\n// minh - logic to update or insert conversations length row\nexport const dbUpdateAverageConversationsLength = async () => {\n  const existingData = await dbDisplayAverageConversationsLength();\n  const dayStats = await knex('metrics_active_conversations')\n    .debug(isDebugOn)\n    .join(\n      knex('messages')\n        .select(\n          knex.raw(`chat_time::date AS \"chatDate\", count(id) AS \"chatCount\"`),\n        )\n        .groupBy('chatDate')\n        .orderBy('chatDate', 'asc')\n        .as('t1'),\n      'metrics_active_conversations.timestamp',\n      'chatDate',\n    )\n    .select(\n      knex.raw(`timestamp::date AS \"Date\", \n                conversations_count AS \"Rooms\", \n                t1.\"chatCount\"`),\n    )\n    .groupBy('Date', 'Rooms', 't1.chatCount')\n    .orderBy('Date', 'desc');\n\n  const avgLength = moment(dayStats[0].Date)\n    .startOf('day')\n    .isSame(moment().startOf('day'))\n    ? dayStats[0].chatCount / dayStats[0].Rooms\n    : 0;\n\n  if (\n    moment(existingData[0].timestamp)\n      .startOf('day')\n      .isSame(moment().startOf('day'))\n  ) {\n    Number.isNaN(avgLength)\n      ? await knex.transaction(trx =>\n          trx('metrics_conversations_length')\n            .debug(isDebugOn)\n            .update({\n              conversations_length: 0,\n            })\n            .where(\n              knex.raw('??::date = ?', ['timestamp', moment().startOf('day')]),\n            ),\n        )\n      : await knex.transaction(trx =>\n          trx('metrics_conversations_length')\n            .debug(isDebugOn)\n            .update({\n              conversations_length: avgLength.toFixed(2),\n            })\n            .where(\n              knex.raw('??::date = ?', ['timestamp', moment().startOf('day')]),\n            ),\n        );\n  } else {\n    Number.isNaN(avgLength)\n      ? await knex.transaction(trx =>\n          trx('metrics_conversations_length')\n            .debug(isDebugOn)\n            .insert({\n              conversations_length: 0,\n              timestamp: moment().startOf('day'),\n            }),\n        )\n      : await knex.transaction(trx =>\n          trx('metrics_conversations_length')\n            .debug(isDebugOn)\n            .insert({\n              conversations_length: avgLength.toFixed(2),\n              timestamp: moment().startOf('day'),\n            }),\n        );\n  }\n\n  return knex('metrics_conversations_length')\n    .debug(isDebugOn)\n    .select('*')\n    .where(knex.raw('??::date = ?', ['timestamp', moment().startOf('day')]));\n};\n\n// metrics by week, month, whole history\nexport const dbDisplayAllMetrics = () =>\n  knex('metrics_users_registered')\n    .join(\n      'metrics_active_users',\n      knex.raw('??::date', ['metrics_users_registered.timestamp']),\n      knex.raw('??::date', ['metrics_active_users.timestamp']),\n    )\n    .join(\n      'metrics_active_conversations',\n      knex.raw('??::date', ['metrics_users_registered.timestamp']),\n      knex.raw('??::date', ['metrics_active_conversations.timestamp']),\n    )\n    .join(\n      'metrics_conversations_length',\n      knex.raw('??::date', ['metrics_users_registered.timestamp']),\n      knex.raw('??::date', ['metrics_conversations_length.timestamp']),\n    )\n    .select(\n      knex.raw(`metrics_users_registered.\"timestamp\" as date,\n                      metrics_users_registered.\"users_count\" as number_of_users_registered,\n                      metrics_active_users.\"users_count\" as number_of_active_users,\n                      metrics_active_conversations.\"conversations_count\" as number_of_active_conversations,\n                      metrics_conversations_length.\"conversations_length\" as average_conversations_length`),\n    )\n    .groupBy(\n      'date',\n      'number_of_users_registered',\n      'number_of_active_users',\n      'number_of_active_conversations',\n      'average_conversations_length',\n    )\n    .orderBy('date', 'desc');\n\nexport const dbDisplayWeekMetrics = () =>\n  knex('metrics_users_registered')\n    .join(\n      'metrics_active_users',\n      knex.raw('??::date', ['metrics_users_registered.timestamp']),\n      knex.raw('??::date', ['metrics_active_users.timestamp']),\n    )\n    .join(\n      'metrics_active_conversations',\n      knex.raw('??::date', ['metrics_users_registered.timestamp']),\n      knex.raw('??::date', ['metrics_active_conversations.timestamp']),\n    )\n    .join(\n      'metrics_conversations_length',\n      knex.raw('??::date', ['metrics_users_registered.timestamp']),\n      knex.raw('??::date', ['metrics_conversations_length.timestamp']),\n    )\n    .select(\n      knex.raw(`metrics_users_registered.\"timestamp\" as date,\n                      metrics_users_registered.\"users_count\" as number_of_users_registered,\n                      metrics_active_users.\"users_count\" as number_of_active_users,\n                      metrics_active_conversations.\"conversations_count\" as number_of_active_conversations,\n                      metrics_conversations_length.\"conversations_length\" as average_conversations_length`),\n    )\n    .limit(7)\n    .groupBy(\n      'date',\n      'number_of_users_registered',\n      'number_of_active_users',\n      'number_of_active_conversations',\n      'average_conversations_length',\n    )\n    .orderBy('date', 'desc');\n\nexport const dbDisplayMonthMetrics = () =>\n  knex('metrics_users_registered')\n    .join(\n      'metrics_active_users',\n      knex.raw('??::date', ['metrics_users_registered.timestamp']),\n      knex.raw('??::date', ['metrics_active_users.timestamp']),\n    )\n    .join(\n      'metrics_active_conversations',\n      knex.raw('??::date', ['metrics_users_registered.timestamp']),\n      knex.raw('??::date', ['metrics_active_conversations.timestamp']),\n    )\n    .join(\n      'metrics_conversations_length',\n      knex.raw('??::date', ['metrics_users_registered.timestamp']),\n      knex.raw('??::date', ['metrics_conversations_length.timestamp']),\n    )\n    .select(\n      knex.raw(`metrics_users_registered.\"timestamp\" as date,\n                      metrics_users_registered.\"users_count\" as number_of_users_registered,\n                      metrics_active_users.\"users_count\" as number_of_active_users,\n                      metrics_active_conversations.\"conversations_count\" as number_of_active_conversations,\n                      metrics_conversations_length.\"conversations_length\" as average_conversations_length`),\n    )\n    .limit(30)\n    .groupBy(\n      'date',\n      'number_of_users_registered',\n      'number_of_active_users',\n      'number_of_active_conversations',\n      'average_conversations_length',\n    )\n    .orderBy('date', 'desc');\n"]}