{"version":3,"sources":["../../src/models/events.js"],"names":["eventFields","dbGetEvents","userId","loveTags","where","andWhere","select","knex","raw","then","res","tagsarray","hateTags","userLocations","leftJoin","locationsarray","eventsWithLoveAndHateInCommon","whereIn","eventids","from","as","groupBy","union","orWhere","whereNotIn","orderByRaw","data","i","length","id","participantsDetails","participantDetails","dbCreateEvent","console","log","transaction","trx","report","insert","returning","results","participantId","hostId","eventId","chatroom","creatorId","isEventChatroom","chatroomId","update","dbGetEventDetails","event","eventParticipants","dbGetEventParticipants","eventTopTags","dbGetEventTopYeahsNahs","eventPersonality","dbGetEventPersonality","topEventPersonalities","rows","hateCommonLoveCommon","loveCommon","map","love","hate","user","index","hostUser","splice","unshift","topEventYeahs","topEventNahs","yeah","nah","topYeahsNahs","concat"],"mappings":"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","file":"events.js","sourcesContent":["import knex from '../utils/knex';\nimport moment from 'moment';\n\nconst eventFields = [\n  'events.id',\n  'events.createdAt',\n  'events.title',\n  'events.eventImage',\n  'events.description',\n  'events.city',\n  'events.address',\n  'events.eventDate as date',\n  'events.minParticipants',\n  'events.maxParticipants as maxParticipants',\n  'events.participantsMix',\n  'events.hostId',\n  'events.chatroomId',\n];\n\nexport const dbGetEvents = async userId => {\n  const loveTags = await knex('user_tag')\n    .where('userId', userId)\n    .andWhere('love', true)\n    .select(knex.raw('array_agg(DISTINCT \"tagId\") as tagsArray'))\n    .then(res => {\n      return res[0].tagsarray;\n    });\n\n  const hateTags = await knex('user_tag')\n    .where('userId', userId)\n    .andWhere('love', false)\n    .select(knex.raw('array_agg(DISTINCT \"tagId\") as tagsArray'))\n    .then(res => {\n      return res[0].tagsarray;\n    });\n\n  const userLocations = await knex('user_location')\n    .leftJoin('locations', 'locations.id', 'user_location.locationId')\n    .where('userId', userId)\n    .select(knex.raw('array_agg(DISTINCT locations.name) as locationsArray'))\n    .then(res => {\n      return res[0].locationsarray;\n    });\n\n  const eventsWithLoveAndHateInCommon = await knex('events')\n    .select(knex.raw('array_agg(DISTINCT events.id) as eventids'))\n    .leftJoin('user_tag as utlove', 'utlove.userId', 'events.hostId')\n    .leftJoin('user_tag as uthate', 'uthate.userId', 'events.hostId')\n    .whereIn('events.city', userLocations)\n    .andWhere(\n      knex.raw(`utlove.\"tagId\" IN (${loveTags}) AND utlove.\"love\" = true`),\n    )\n    .andWhere(\n      knex.raw(`uthate.\"tagId\" IN (${hateTags}) AND uthate.\"love\" = false`),\n    )\n    .then(res => (res[0].eventids ? res[0].eventids : []));\n\n  return knex\n    .from(function() {\n      this.select([\n        ...eventFields,\n        knex.raw(\n          'count(DISTINCT participants.\"participantId\") AS participants',\n        ),\n        knex.raw('count(DISTINCT utlove.\"tagId\") AS loveCommon'),\n        knex.raw('count(DISTINCT uthate.\"tagId\") AS hateCommon'),\n      ])\n        .from('events')\n        .leftJoin(\n          'user_event as participants',\n          'participants.eventId',\n          'events.id',\n        )\n        .leftJoin('users', 'users.id', 'participants.participantId')\n        .leftJoin('user_tag as utlove', 'utlove.userId', 'events.hostId')\n        .leftJoin('user_tag as uthate', 'uthate.userId', 'events.hostId')\n        .whereIn('events.city', userLocations)\n        .andWhere(\n          knex.raw(`utlove.\"tagId\" IN (${loveTags}) AND utlove.\"love\" = true`),\n        )\n        .andWhere(\n          knex.raw(`uthate.\"tagId\" IN (${hateTags}) AND uthate.\"love\" = false`),\n        )\n        .as('filteredEvents')\n        .groupBy('events.id');\n    }, true)\n    .union(function() {\n      this.select([\n        ...eventFields,\n        knex.raw(\n          'count(DISTINCT participants.\"participantId\") AS participants',\n        ),\n        knex.raw(`0 AS loveCommon`),\n        knex.raw(`0 AS hateCommon `),\n      ])\n        .from('events')\n        .leftJoin(\n          'user_event as participants',\n          'participants.eventId',\n          'events.id',\n        )\n        .leftJoin('users', 'users.id', 'participants.participantId')\n        .leftJoin('user_tag as utlove', 'utlove.userId', 'events.hostId')\n        .leftJoin('user_tag as uthate', 'uthate.userId', 'events.hostId')\n        .whereIn('events.city', userLocations)\n        .orWhere('events.hostId', userId)\n        .whereNotIn('events.id', eventsWithLoveAndHateInCommon)\n        .groupBy('events.id');\n    }, true)\n    .as('allEvents')\n    .orderByRaw('participants DESC, date, loveCommon DESC, hateCommon DESC')\n    .then(async data => {\n      for (let i = 0; i < data.length; i++) {\n        await knex\n          .select('users.id', 'users.avatar', 'users.image')\n          .from('users')\n          .leftJoin('user_event', 'participantId', 'users.id')\n          .where('eventId', data[i].id)\n          .then(\n            participantDetails =>\n              (data[i].participantsDetails = participantDetails),\n          );\n      }\n      return data;\n    });\n};\n\nexport const dbCreateEvent = eventFields => {\n  console.log(eventFields);\n  return knex.transaction(async trx => {\n    const report = await trx('events')\n      .insert(eventFields)\n      .returning('*')\n      .then(results => results[0]);\n\n    await trx('user_event')\n      .insert({\n        participantId: report.hostId,\n        eventId: report.id,\n      })\n      .then();\n\n    const chatroom = await trx('chatrooms')\n      .insert({ creatorId: report.hostId, isEventChatroom: true })\n      .returning('*')\n      .then(results => results[0]);\n\n    await trx('user_chatroom')\n      .insert({ chatroomId: chatroom.id, participantId: report.hostId })\n      .returning('*')\n      .then();\n\n    await trx('events')\n      .update({ chatroomId: chatroom.id })\n      .where({ id: report.id })\n      .then();\n\n    report.chatroomId = chatroom.id;\n\n    return report;\n  });\n};\n\nexport const dbGetEventDetails = async (eventId, userId) => {\n  const event = await knex\n    .select()\n    .from('events')\n    .where('id', eventId)\n    .then(data => data[0]);\n\n  const eventParticipants = await dbGetEventParticipants(event, userId);\n  const eventTopTags = await dbGetEventTopYeahsNahs(eventId);\n  const eventPersonality = await dbGetEventPersonality(eventId);\n\n  event.eventParticipants = eventParticipants;\n  event.eventTopTags = eventTopTags;\n  event.eventPersonality = eventPersonality;\n\n  return event;\n};\n\nexport const dbGetEventPersonality = async eventId => {\n  const topEventPersonalities = await knex.raw(`SELECT \"name\", COUNT(\"user_event\".\"participantId\")  as \"Number_of_Personalities\"   FROM events\n  JOIN \"user_event\" ON events.id = \"user_event\".\"eventId\"\n  JOIN \"user_personality\"  ON \"user_personality\".\"userId\" =  \"user_event\".\"participantId\"\n  JOIN \"personalities\" ON \"user_personality\".\"personalityId\" = \"personalities\".\"id\"\n  WHERE \"user_event\".\"eventId\" = ${eventId}\n  GROUP BY \"personalities\".\"name\"\n  ORDER BY \"Number_of_Personalities\" DESC\n  LIMIT 3`);\n  return topEventPersonalities.rows;\n};\n\nexport const dbGetEventParticipants = async (event, userId) => {\n  const hateCommonLoveCommon = await knex.raw(`SELECT \"users\".\"id\",\"users\".\"avatar\",\"users\".\"username\",\n    count(DISTINCT \"tags\".\"name\") AS \"hateCommon\"\n    FROM \"users\"\n    left join \"user_tag\"\n    ON \"user_tag\".\"userId\" = \"users\".\"id\"\n    left join \"tags\"\n    ON \"tags\".\"id\" = \"user_tag\".\"tagId\"\n    WHERE \"user_tag\".\"love\" = ${false}\n    AND \"users\".\"id\" IN (SELECT \"users\".\"id\"  FROM \"users\"\n          left join \"user_event\"\n          ON \"user_event\".\"participantId\" = \"users\".\"id\"\n          left join \"events\"\n          ON \"events\".\"id\" = \"user_event\".\"eventId\"\n          WHERE \"user_event\".\"eventId\" = ${event.id})\n    AND \"tags\".\"name\" IN (SELECT \"tags\".\"name\" FROM \"user_tag\"\n                      left join \"tags\" ON \"tags\".\"id\" = \"user_tag\".\"tagId\"\n                      WHERE \"user_tag\".\"userId\" = ${userId}\n                      AND \"user_tag\".\"love\" = ${false})\n    GROUP BY \"users\".\"id\"`);\n\n  const loveCommon = await knex.raw(`SELECT \"users\".\"id\",\"users\".\"username\",\n      count(DISTINCT \"tags\".\"name\") AS \"loveCommon\"\n      FROM \"users\"\n      left join \"user_tag\"\n      ON \"user_tag\".\"userId\" = \"users\".\"id\"\n      left join \"tags\"\n      ON \"tags\".\"id\" = \"user_tag\".\"tagId\"\n      WHERE \"user_tag\".\"love\" = ${true}\n      AND \"users\".\"id\" != ${userId}\n      AND \"users\".\"id\" IN (SELECT \"users\".\"id\"  FROM \"users\"\n            left join \"user_event\"\n            ON \"user_event\".\"participantId\" = \"users\".\"id\"\n            left join \"events\"\n            ON \"events\".\"id\" = \"user_event\".\"eventId\"\n            WHERE \"user_event\".\"eventId\" = ${event.id})\n      AND \"tags\".\"name\" IN (SELECT \"tags\".\"name\" FROM \"user_tag\"\n                        left join \"tags\" ON \"tags\".\"id\" = \"user_tag\".\"tagId\"\n                        WHERE \"user_tag\".\"userId\" = ${userId}\n                        AND \"user_tag\".\"love\" = ${true})\n      GROUP BY \"users\".\"id\"`);\n\n  hateCommonLoveCommon.rows.map(hate => {\n    loveCommon.rows.map(love => {\n      if (love.id === hate.id) {\n        hate.loveCommon = love.loveCommon;\n      }\n    });\n  });\n  hateCommonLoveCommon.rows.map((user, index) => {\n    if (user.id == event.hostId) {\n      const hostUser = user;\n      hateCommonLoveCommon.rows.splice(index, index + 1);\n      hateCommonLoveCommon.rows.unshift(hostUser);\n    }\n  });\n  return hateCommonLoveCommon.rows;\n};\n\nexport const dbGetEventTopYeahsNahs = async eventId => {\n  const topEventYeahs = await knex.raw(`SELECT \"tags\".\"name\", COUNT(\"user_event\".\"participantId\")  FROM events\n    JOIN \"user_event\" ON events.id = \"user_event\".\"eventId\"\n    JOIN \"user_tag\"  ON \"user_tag\".\"userId\" =  \"user_event\".\"participantId\"\n    JOIN \"tags\" ON \"tags\".\"id\" = \"user_tag\".\"tagId\"\n    WHERE \"user_event\".\"eventId\" = ${eventId}\n    AND \"user_tag\".love = true\n    GROUP BY \"tags\".\"name\"\n    ORDER BY COUNT DESC\n    LIMIT 3`);\n\n  const topEventNahs = await knex.raw(`SELECT \"tags\".\"name\", COUNT(\"user_event\".\"participantId\")  FROM events\n    JOIN \"user_event\" ON events.id = \"user_event\".\"eventId\"\n    JOIN \"user_tag\"  ON \"user_tag\".\"userId\" =  \"user_event\".\"participantId\"\n    JOIN \"tags\" ON \"tags\".\"id\" = \"user_tag\".\"tagId\"\n    WHERE \"user_event\".\"eventId\" = ${eventId}\n    AND \"user_tag\".love = false\n    GROUP BY \"tags\".\"name\"\n    ORDER BY COUNT DESC\n    LIMIT 3`);\n\n  topEventYeahs.rows.map(yeah => {\n    yeah.love = true;\n  });\n\n  topEventNahs.rows.map(nah => {\n    nah.love = false;\n  });\n\n  const topYeahsNahs = topEventYeahs.rows.concat(topEventNahs.rows);\n\n  return topYeahsNahs;\n};\n"]}