{"version":3,"sources":["../../src/utils/auth.js"],"names":["comparePasswords","passwordAttempt","user","Promise","resolve","reject","bcrypt","compare","password","err","isValid","email","preVerifyCredentials","payload","reply","first","where","toLowerCase","trim","leftJoin","then","response","catch","console","log","valueOf","includes","Boom","unauthorized","doAuth","validate","Joi","string","required","failAction","request","pre","method","assign","createToken","fields","token","jwt","sign","auth","secret","algorithm","options","algorithms","bearerRegex","getAuthWithScope","scope","strategy","bindUserData","authHeader","headers","authorization","match","decoded","decode"],"mappings":"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","file":"auth.js","sourcesContent":["import Joi from 'joi';\nimport Boom from 'boom';\nimport knex from '../utils/knex';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { dbUserIsBanned } from '../models/users';\nimport auth from './config/auth';\n\nexport const comparePasswords = (passwordAttempt, user) =>\n  new Promise((resolve, reject) =>\n    bcrypt.compare(passwordAttempt, user.password, (err, isValid) => {\n      if (!err && isValid) {\n        resolve(user);\n      } else {\n        reject(`Incorrect password attempt by user with email '${user.email}'`);\n      }\n    }),\n  );\n\nexport const preVerifyCredentials = (\n  { payload: { email, password: passwordAttempt } },\n  reply,\n) =>\n  knex('users')\n    .first()\n    .where({ email: email.toLowerCase().trim() })\n    .leftJoin('secrets', 'users.id', 'secrets.ownerId')\n    .then(async user => {\n      if (!user) {\n        return Promise.reject(\n          `User with email '${email}' not found in database`,\n        );\n      }\n\n      if (await dbUserIsBanned(user)) {\n        return Promise.reject(`'${email}' has been banned`);\n      }\n\n      if (!user.password) {\n        return Promise.reject(\n          `User with email '${email}' lacks password: logins disabled`,\n        );\n      }\n\n      return comparePasswords(passwordAttempt, user);\n    })\n    .then(response => reply.response(response))\n    .catch(err => {\n      console.log(err);\n      if (err.valueOf().includes('activated')) {\n        return Boom.unauthorized(err);\n      }\n      return Boom.unauthorized(err);\n    });\n\nexport const doAuth = {\n  validate: {\n    payload: {\n      email: Joi.string().required(),\n      password: Joi.string().required(),\n    },\n    failAction: (request, reply) =>\n      Boom.unauthorized('Incorrect email or password!'),\n  },\n  pre: [{ method: preVerifyCredentials, assign: 'user' }],\n};\n\nexport const createToken = fields => ({\n  token: jwt.sign(fields, auth.secret, {\n    algorithm: auth.options.algorithms[0],\n  }),\n});\n\nconst bearerRegex = /(Bearer\\s+)*(.*)/i;\n\nexport const getAuthWithScope = scope => ({\n  auth: { strategy: 'jwt', scope: ['admin', scope] },\n  pre: [{ method: bindUserData, assign: 'user' }],\n});\n\nexport const bindUserData = (request, reply) => {\n  const authHeader = request.headers.authorization;\n\n  const token = authHeader.match(bearerRegex)[2];\n  const decoded = jwt.decode(token);\n\n  return reply.response(decoded);\n};\n"]}