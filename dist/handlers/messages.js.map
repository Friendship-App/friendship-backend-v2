{"version":3,"sources":["../../src/handlers/messages.js"],"names":["updateMessages","request","reply","query","chatroomId","pre","user","id","then","response","getMessages","data","createMessage","chatTime","Date","senderId","textMessage","payload","message","newUnreadMessages","receiverId","map","push","messageId"],"mappings":";;;;;;;AAAA;;;;AAOO,MAAMA,0CAAiB,CAACC,OAAD,EAAUC,KAAV,KAC5B,gCAAiBD,QAAQE,KAAR,CAAcC,UAA/B,EAA2CH,QAAQI,GAAR,CAAYC,IAAZ,CAAiBC,EAA5D,EAAgEC,IAAhE,CACEN,MAAMO,QAAN,EADF,CADK;;AAKA,MAAMC,oCAAc,CAACT,OAAD,EAAUC,KAAV,KACzB,6BAAcD,QAAQE,KAAR,CAAcC,UAA5B,EAAwCI,IAAxC,CAA6CG,QAAQT,MAAMO,QAAN,CAAeE,IAAf,CAArD,CADK;;AAGA,MAAMC;AAAA,+BAAgB,WAAeX,OAAf,EAAwBC,KAAxB,EAA+B;AAC1D,WAAO,+BAAgB;AACrBW,gBAAU,IAAIC,IAAJ,EADW;AAErBC,gBAAUd,QAAQI,GAAR,CAAYC,IAAZ,CAAiBC,EAFN;AAGrBS,mBAAaf,QAAQgB,OAAR,CAAgBD,WAHR;AAIrBZ,kBAAYH,QAAQgB,OAAR,CAAgBb;AAJP,KAAhB,EAMJI,IANI;AAAA,oCAMC,WAAMU,OAAN,EAAiB;AACrB,cAAMC,oBAAoB,EAA1B;AACAlB,gBAAQgB,OAAR,CAAgBG,UAAhB,CAA2BC,GAA3B,CAA+B,cAAM;AACnCF,4BAAkBG,IAAlB,CAAuB;AACrBC,uBAAWL,QAAQX,EADE;AAErBa,wBAAYb,EAFS;AAGrBH,wBAAYc,QAAQd;AAHC,WAAvB;AAKD,SAND;AAOA,cAAM,0CAA2Be,iBAA3B,CAAN;AACA,eAAOD,OAAP;AACD,OAjBI;;AAAA;AAAA;AAAA;AAAA,UAkBJV,IAlBI,CAkBC;AAAA,aAAcN,MAAMO,QAAN,CAAeL,UAAf,CAAd;AAAA,KAlBD,CAAP;AAmBD,GApBY;;AAAA;AAAA;AAAA;AAAA,IAAN","file":"messages.js","sourcesContent":["import {\n  dbCreateMessage,\n  dbGetMessages,\n  dbRegisterNewUnreadMessage,\n  dbUpdateMessages,\n} from '../models/messages';\n\nexport const updateMessages = (request, reply) =>\n  dbUpdateMessages(request.query.chatroomId, request.pre.user.id).then(\n    reply.response(),\n  );\n\nexport const getMessages = (request, reply) =>\n  dbGetMessages(request.query.chatroomId).then(data => reply.response(data));\n\nexport const createMessage = async function(request, reply) {\n  return dbCreateMessage({\n    chatTime: new Date(),\n    senderId: request.pre.user.id,\n    textMessage: request.payload.textMessage,\n    chatroomId: request.payload.chatroomId,\n  })\n    .then(async message => {\n      const newUnreadMessages = [];\n      request.payload.receiverId.map(id => {\n        newUnreadMessages.push({\n          messageId: message.id,\n          receiverId: id,\n          chatroomId: message.chatroomId,\n        });\n      });\n      await dbRegisterNewUnreadMessage(newUnreadMessages);\n      return message;\n    })\n    .then(chatroomId => reply.response(chatroomId));\n};\n"]}