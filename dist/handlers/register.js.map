{"version":3,"sources":["../../src/handlers/register.js"],"names":["checkInputAvailability","request","reply","username","email","query","then","data","response","count","registerUser","password","scope","description","image","birthyear","avatar","genders","locations","personalities","lovedTags","hatedTags","payload","hashedPassword","hashPassword","fieldsToCreateUser","userId","Promise","resolve","reject","bcrypt","genSalt","authConfig","saltRounds","saltErr","salt","hash","hashErr"],"mappings":";;;;;;;AAAA;;;;AACA;;AAKA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEO,MAAMA,0DAAyB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACxD,QAAM,EAAEC,QAAF,EAAYC,KAAZ,KAAsBH,QAAQI,KAApC;AACA,MAAIF,QAAJ,EAAc;AACZ,WAAO,2CAA4BA,QAA5B,EAAsCG,IAAtC,CAA2CC,QAChDL,MAAMM,QAAN,CAAeD,KAAK,CAAL,EAAQE,KAAvB,CADK,CAAP;AAGD;AACD,SAAO,wCAAyBL,KAAzB,EAAgCE,IAAhC,CAAqCC,QAC1CL,MAAMM,QAAN,CAAeD,KAAK,CAAL,EAAQE,KAAvB,CADK,CAAP;AAGD,CAVM;;AAYA,MAAMC;AAAA,+BAAe,WAAOT,OAAP,EAAgBC,KAAhB,EAA0B;AACpD,UAAM;AACJS,cADI;AAEJC,WAFI;AAGJR,WAHI;AAIJS,iBAJI;AAKJV,cALI;AAMJW,WANI;AAOJC,eAPI;AAQJC,YARI;AASJC,aATI;AAUJC,eAVI;AAWJC,mBAXI;AAYJC,eAZI;AAaJC;AAbI,QAcFpB,QAAQqB,OAdZ;AAeA,UAAMC,iBAAiB,MAAMC,aAAab,QAAb,CAA7B;AACA,UAAMc,qBAAqB;AACzBrB,WADyB;AAEzBS,iBAFyB;AAGzBV,cAHyB;AAIzBY,eAJyB;AAKzBC,YALyB;AAMzBF,WANyB;AAOzBF;AAPyB,KAA3B;AASA,WAAO,MAAM,4BAAaa,kBAAb,EACVnB,IADU;AAAA,oCACL,WAAMoB,MAAN,EAAgB;AACpB,cAAM,gCAAiBA,MAAjB,EAAyBH,cAAzB,CAAN;AACA,cAAM,kCAAkBG,MAAlB,EAA0BR,SAA1B,CAAN;AACA,cAAM,8BAAgBQ,MAAhB,EAAwBT,OAAxB,CAAN;AACA,cAAM,0CAAsBS,MAAtB,EAA8BP,aAA9B,CAAN;AACA,cAAM,wBAAaO,MAAb,EAAqBN,SAArB,EAAgCC,SAAhC,CAAN;AACD,OAPU;;AAAA;AAAA;AAAA;AAAA,UAQVf,IARU,CAQL;AAAA,aAAMJ,MAAMM,QAAN,EAAN;AAAA,KARK,CAAb;AASD,GAnCY;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAqCP;AACA,MAAMgB,eAAeb,YACnB,IAAIgB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BC,qBAAOC,OAAP,CAAeC,eAAWC,UAA1B,EAAsC,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACvD,QAAID,OAAJ,EAAa;AACXL,aAAOK,OAAP;AACD;AACDJ,uBAAOM,IAAP,CAAYzB,QAAZ,EAAsBwB,IAAtB,EAA4B,CAACE,OAAD,EAAUD,IAAV,KAAmB;AAC7C,UAAIC,OAAJ,EAAa;AACXR,eAAOQ,OAAP;AACD,OAFD,MAEO;AACLT,gBAAQQ,IAAR;AACD;AACF,KAND;AAOD,GAXD;AAYD,CAbD,CADF","file":"register.js","sourcesContent":["import bcrypt from 'bcryptjs';\nimport {\n  dbCheckEmailAvailability,\n  dbCheckUsernameAvailability,\n  dbCreateUser,\n} from '../models/register';\nimport authConfig from '../utils/config/auth';\nimport { registerPassword } from './password';\nimport { registerLocations } from './locations';\nimport { registerGenders } from './genders';\nimport { registerTags } from './tags';\nimport { registerPersonalities } from './personalities';\n\nexport const checkInputAvailability = (request, reply) => {\n  const { username, email } = request.query;\n  if (username) {\n    return dbCheckUsernameAvailability(username).then(data =>\n      reply.response(data[0].count),\n    );\n  }\n  return dbCheckEmailAvailability(email).then(data =>\n    reply.response(data[0].count),\n  );\n};\n\nexport const registerUser = async (request, reply) => {\n  const {\n    password,\n    scope,\n    email,\n    description,\n    username,\n    image,\n    birthyear,\n    avatar,\n    genders,\n    locations,\n    personalities,\n    lovedTags,\n    hatedTags,\n  } = request.payload;\n  const hashedPassword = await hashPassword(password);\n  const fieldsToCreateUser = {\n    email,\n    description,\n    username,\n    birthyear,\n    avatar,\n    image,\n    scope,\n  };\n  return await dbCreateUser(fieldsToCreateUser)\n    .then(async userId => {\n      await registerPassword(userId, hashedPassword);\n      await registerLocations(userId, locations);\n      await registerGenders(userId, genders);\n      await registerPersonalities(userId, personalities);\n      await registerTags(userId, lovedTags, hatedTags);\n    })\n    .then(() => reply.response());\n};\n\n// Return promise which resolves to hash of given password\nconst hashPassword = password =>\n  new Promise((resolve, reject) => {\n    bcrypt.genSalt(authConfig.saltRounds, (saltErr, salt) => {\n      if (saltErr) {\n        reject(saltErr);\n      }\n      bcrypt.hash(password, salt, (hashErr, hash) => {\n        if (hashErr) {\n          reject(hashErr);\n        } else {\n          resolve(hash);\n        }\n      });\n    });\n  });\n"]}