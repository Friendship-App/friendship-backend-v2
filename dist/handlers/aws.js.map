{"version":3,"sources":["../../src/handlers/aws.js"],"names":["S3_BUCKET","aws","config","region","getSignedUrl","request","reply","fileName","query","fileType","s3Params","Bucket","Key","Expires","ContentType","ACL","url","getSignedUrlPromise","catch","console","log","err","response","JSON","stringify","signedRequest","s3","S3","operation","params","Promise","resolve","reject"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA,MAAMA,YAAY,eAAlB;AACAC,iBAAIC,MAAJ,CAAWC,MAAX,GAAoB,WAApB;;AAEO,MAAMC;AAAA,+BAAe,WAAOC,OAAP,EAAgBC,KAAhB,EAA0B;AACpD,UAAMC,WAAWF,QAAQG,KAAR,CAAc,WAAd,CAAjB;AACA,UAAMC,WAAWJ,QAAQG,KAAR,CAAc,WAAd,CAAjB;AACA,UAAME,WAAW;AACfC,cAAQX,SADO;AAEfY,WAAKL,QAFU;AAGfM,eAAS,EAHM;AAIfC,mBAAaL,QAJE;AAKfM,WAAK;AALU,KAAjB;;AAQA,UAAMC,MAAM,MAAMC,oBAAoB,WAApB,EAAiCP,QAAjC,EAA2CQ,KAA3C,CAAiD;AAAA,aACjEC,QAAQC,GAAR,CAAYC,GAAZ,CADiE;AAAA,KAAjD,CAAlB;;AAIA,WAAOf,MAAMgB,QAAN,CACLC,KAAKC,SAAL,CAAe;AACbC,qBAAeT,GADF;AAEbA,WAAM,WAAUhB,SAAU,qBAAoBO,QAAS;AAF1C,KAAf,CADK,CAAP;AAMD,GArBY;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAuBP,MAAMmB,KAAK,IAAIzB,iBAAI0B,EAAR,EAAX;;AAEA,MAAMV,sBAAsB,CAACW,SAAD,EAAYC,MAAZ,KAC1B,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BN,KAAGtB,YAAH,CAAgBwB,SAAhB,EAA2BC,MAA3B,EAAmC,CAACR,GAAD,EAAML,GAAN,KAAc;AAC/CK,UAAMW,OAAOX,GAAP,CAAN,GAAoBU,QAAQf,GAAR,CAApB;AACD,GAFD;AAGD,CAJD,CADF","file":"aws.js","sourcesContent":["import aws from 'aws-sdk';\n\nconst S3_BUCKET = 'friendshipapp';\naws.config.region = 'eu-west-2';\n\nexport const getSignedUrl = async (request, reply) => {\n  const fileName = request.query['file-name'];\n  const fileType = request.query['file-type'];\n  const s3Params = {\n    Bucket: S3_BUCKET,\n    Key: fileName,\n    Expires: 60,\n    ContentType: fileType,\n    ACL: 'public-read',\n  };\n\n  const url = await getSignedUrlPromise('putObject', s3Params).catch(err =>\n    console.log(err),\n  );\n\n  return reply.response(\n    JSON.stringify({\n      signedRequest: url,\n      url: `https://${S3_BUCKET}.s3.amazonaws.com/${fileName}`,\n    }),\n  );\n};\n\nconst s3 = new aws.S3();\n\nconst getSignedUrlPromise = (operation, params) =>\n  new Promise((resolve, reject) => {\n    s3.getSignedUrl(operation, params, (err, url) => {\n      err ? reject(err) : resolve(url);\n    });\n  });\n"]}